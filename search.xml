<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java容器、泛型及一些知识点的回顾</title>
      <link href="/2019/08/09/java-rong-qi-fan-xing-ji-yi-xie-zhi-shi-dian-de-hui-gu/"/>
      <url>/2019/08/09/java-rong-qi-fan-xing-ji-yi-xie-zhi-shi-dian-de-hui-gu/</url>
      
        <content type="html"><![CDATA[<hr><ul><li>记录一些自己在学习中认识不够清晰的知识点，方便自己回顾</li></ul><hr><p>一、 集合的知识结构图<br><img src="https://s2.ax1x.com/2019/08/10/eLk77D.png" alt></p><ol><li><p>什么时候使用集合？</p><p> 当我们需要将一些相同结构的个体整合在一起时，就可以考虑使用集合了 。举例：购物车</p></li></ol><ol start="2"><li><p>为什么要使用集合？</p><p>  集合和数组相似点：<br>  都可以存储多个对象，对外作为一个整体存在，是“装其他对象的对象”.</p></li></ol><pre><code> 数组：优点：线性序列效率高  缺点：长度需要初始化，且固定不变，不灵活。删除和添加效率低下；缺乏封装，操作繁琐。  因为数组的这些缺点，因此引入集合</code></pre><p>简单概念解释</p><p>• Collection   根接口，表示一组对象</p><p>• List 有顺序可重复 </p><pre><code>  ArrayList： 查询效率高，增删效率低，长度不受限实现（扩容）  Linkedlist: 增删效率高，查询效率低</code></pre><p>• Set  没有顺序不可重复</p><pre><code> • HashSet  • 采用Hashtable哈希表存储结构（神奇的结构）  • 优点：添加速度快 查询速度快 删除速度快  • 缺点：无序  • LinkedHashSet  • 采用哈希表存储结构，同时使用链表维护次序 • 有序（添加顺序） • TreeSet • 采用二叉树（红黑树）的存储结构  • 优点：有序 查询速度比List快（按照内容查询）  • 缺点：查询速度没有HashSet快</code></pre><p>• Map  存储一组键值对象，key和value</p><pre><code>HashMap：底层数据结构：数组加链表，键不能重复，如果重复则新的覆盖旧的TreeMap：排序时使用• Key 唯一 无序• value 不唯一 无序</code></pre><hr><p>二、泛型（转自csdn 作者 我不是大王强）</p><p>//  泛型：就是一种不确定的数据类型。</p><p>// 比如：ArrayList<e> E就是泛型。 这种不确定的数据类型需要在使用这个类的时候才能够确定出来。</e></p><p>// 泛型可以省略，如果省略，默认泛型是Object类型。</p><p>// 泛型的好处：</p><ul><li><ol><li>省略了强转的代码。</li></ol></li><li><ol start="2"><li>可以把运行时的问题提前到编译时期。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Generic</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建集合不给出泛型</span>    ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历集合</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//进行遍历，打印出每个字符串长度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*此处练习了向下转型*/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建集合给出泛型</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加元素</span>    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"helloo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"helo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//list2.add(100);编译的时候就会报错，如果没有给出泛型，则不会报错</span>    <span class="token comment" spellcheck="true">//使用增强for遍历集合</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String str2 <span class="token operator">:</span> list2            <span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><hr><p>三、构造器（一种特殊的方法）</p><p>// 用于对象的初始化</p><p>// 需要注意</p><ul><li>构造器的方法名必须和类名一致！</li><li>构造器虽然有返回值，但是不能定义返回类型(返回值的类型肯定是本类)，不能在构造器里调用 return。</li><li>通过new关键字调用！！ </li><li>如果我们没有定义构造器，则系统会自动定义一个无参的构造方法。如果已定义则编译器不会 添加无参数构造方法！</li><li>与普通方法一样，构造方法也可以重载</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法名称必须和类名保持一致</span>    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">double</span> _x<span class="token punctuation">,</span><span class="token keyword">double</span> _y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">=</span>_x<span class="token punctuation">;</span>        y<span class="token operator">=</span>_y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDistance</span><span class="token punctuation">(</span>Point p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">-</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constructor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Point p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//new关键字调用</span>        Point origin<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getDistance</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>四、Static关键字</p><ul><li><p>修饰成员变量和方法，从属于类</p></li><li><p>普通变量和方法从属于对象</p></li><li><p>静态方法不能使用非静态方法</p></li><li><p>非静态方法可以使用静态</p></li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStatic</span>  <span class="token punctuation">{</span>   <span class="token keyword">int</span> a<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//修饰成员变量，从属于类</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//修饰方法</span>     <span class="token comment" spellcheck="true">//tt();  //报错静态方法不能使用非静态方法</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">void</span> <span class="token function">tt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//从属于对象</span>       <span class="token function">gg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以使用静态方法</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>          TestStatic hi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           TestStatic<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//  TestStatic.gg(); //gg(); </span>           <span class="token comment" spellcheck="true">//   hi.gg(); //通过引用也可以访问static变量或static方法。不过，一般还 是使用类名.static成员名来访问。 </span>           <span class="token comment" spellcheck="true">//  gg();</span>           hi<span class="token punctuation">.</span><span class="token function">tt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用对象引用，因为从属于对象</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><hr><p>五、this关键字</p><ul><li>本质：创建好对象的地址</li></ul><p>this的作用: </p><pre><code>• this表示的是当前对象本身， • 更准确地说，this代表当前对象的一个引用。</code></pre><p>普通方法中使用this</p><pre><code>• 区分类成员属性和方法的形参. • 调用当前对象的其他方法（可以省略） • 位置：任意 </code></pre><p>构造方法中使用this</p><pre><code>• 使用this来调用其它构造方法 • 位置：必须是第一条语句• this不能用于static方法。（底层在堆里的对象中，而静态方法在方法区）</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeatThis</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token function">TeatThis</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//区分类成员属性和方法的形参</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">TeatThis</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//调用其它构造方法 ,必须是第一条语句</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用本类中的sing()即调用当前对象的其他方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你妈妈喊你回家吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         TeatThis hi<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeatThis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hi<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次强调</p><pre><code>• This代表当前对象自身的引用（必须new） • This可以修饰属性，区别成员变量和局部变量 • This修饰方法 • This修饰构造方法（必须是第一条语句）</code></pre><hr><p>六、知识点的小问题记录</p><ul><li>Object类是所有Java类的根基类 </li><li><p>如果在类的声明中未使用extends关键字指明其基类，则默认基类为Object类</p><pre><code> public class Person { ... }  public class Person extends Object { ... }</code></pre></li><li><p>B b = new B(); // 则既声明了类型为B的引用，又创建了B的实例（对象），并且将b引用了B的实例（对象）。</p></li><li><p>创建对象的步骤</p><pre><code>• 分配对象空间，并将对象的成员变量初始化为0或空• 执行属性值的显式初始化• 执行构造方法• 返回对象的地址给相关变量</code></pre></li></ul><hr><p>END</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启发性的飞机小游戏（一）</title>
      <link href="/2019/07/22/qi-fa-xing-de-fei-ji-xiao-you-xi-java/"/>
      <url>/2019/07/22/qi-fa-xing-de-fei-ji-xiao-you-xi-java/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>   建议先将结尾源码素材下载，供练习中的对照参考，如果遇到问题，私下补课，也可以联系博主，第一次写有点多的东西，不合理的地方可以评论留言。</p><hr><hr><h3 id="游戏项目的介绍"><a href="#游戏项目的介绍" class="headerlink" title="游戏项目的介绍"></a>游戏项目的介绍</h3><p>基于Eclipse的开发环境，通过AWT图形用户界面技术（现在用的少）建立java项目，目的实现：键盘操控飞机移动、炮弹任意角度飞行、碰撞爆炸效果和游戏时间计时。</p><hr><h4 id="一、初始化窗口"><a href="#一、初始化窗口" class="headerlink" title="一、初始化窗口"></a>一、初始化窗口</h4><ol><li>首先需要的是建立一个窗口，将背景和飞机两张图片显示出来（这里我们需要创建一个图片包和引入图片的工具类）。</li></ol><p>代码如下：</p><pre><code> package game; import java.awt.Color; import java.awt.Frame; import java.awt.Graphics; import java.awt.Image; public class planegame extends Frame { Image planeImg =GameUtil.getImage(&quot;Image/plane.png&quot;); Image bg =GameUtil.getImage(&quot;Image/bg.jpg&quot;); @Override public void paint(Graphics g) {// 自动被调用. g相当一支画笔    g.drawImage(bg, 0,0,null);    g.drawImage(planeImg,250,250,null);    } /** * 初始化窗口 */ public void launchFrame() {    this.setTitle(&quot;天才爱生活作品&quot;);    this.setVisible(true);    this.setSize(Constant.GAME_WIDTH,Constant.GAME_HEIGHT);    this.setLocation(200, 200);    } public static void main(String[] args) {    planegame f = new planegame();    f.launchFrame(); } }</code></pre><ol start="2"><li>我们还需要在game包下再创建一个类，GameUtil（名字变了相应的代码则需要改变）工具类来实现图片的加载，上面 我们有引用到.</li></ol><p>代码如下：</p><pre><code> package game; import java.awt.Image; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.URL; import javax.imageio.ImageIO; public class GameUtil { // 工具类最好将构造器私有化 private GameUtil() { }  /** *  * 返回指定路径文件的图片对象 * @param path * @return */ public static Image getImage(String path) {    BufferedImage bi = null;    try {        URL u = GameUtil.class.getClassLoader().getResource(path);        bi = ImageIO.read(u);    } catch (IOException e) {        e.printStackTrace();    }    return bi;   } }</code></pre><ol start="3"><li><p>同2创建Constant类，方便后续的调用</p><pre><code> public class Constant {   public static final int GAME_WIDTH=500;   public static final int GAME_HEIGHT=500; }</code></pre></li><li><p>效果如下</p><p><img src="https://s2.ax1x.com/2019/07/23/eFNJn1.png" alt></p><p>图片素材和所有代码见文章末尾打包。</p></li></ol><hr><h4 id="二、线程内部类实现动画"><a href="#二、线程内部类实现动画" class="headerlink" title="二、线程内部类实现动画"></a>二、线程内部类实现动画</h4><ol><li><p>在（代码中）初始化窗口</p><p> new PaintThread().start(); //启动重画窗口的线程</p></li><li><p>创建一个内部类代码如下：</p></li></ol><p>//帮助我们反复的重画窗口</p><pre><code>    class PaintThread extends Thread{        @Override        public void run() {            while(true) {            System.out.println(&quot;重画了一次&quot;);//测试使用最后删掉                repaint();                try {                    Thread.sleep(40); //1s=1000ms                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    }</code></pre><ol start="3"><li><p>会出现窗口的闪烁问题加入双缓冲解决</p><pre><code>private Image offScreenImage = null;public void update(Graphics g) { if(offScreenImage == null)     offScreenImage = this.createImage(Constant.GAME_WIDTH,Constant.GAME_HEIGHT);//这是游戏窗口的宽度和高度 Graphics gOff = offScreenImage.getGraphics(); paint(gOff); g.drawImage(offScreenImage, 0, 0, null); }</code></pre><ol start="4"><li>可以将画飞机的位置定义成变量，令坐标++就会产生飞机移动的动画</li></ol></li></ol><hr><h4 id="三、为游戏建一个父类"><a href="#三、为游戏建一个父类" class="headerlink" title="三、为游戏建一个父类"></a>三、为游戏建一个父类</h4><ol><li><p>类似初始化窗口 2 步骤（下面类相同方法）</p><p>代码如下：</p></li></ol><pre><code> import java.awt.Graphics; import java.awt.Image;     import java.awt.Rectangle; public class GameObject { Image img; double x,y; int speed; int width,height; public void drawSelf(Graphics g){     g.drawImage(img, (int)x, (int)y, null); } public GameObject(Image img, double x, double y, int speed, int width, int height) {    super();    this.img = img;    this.x = x;    this.y = y;    this.speed = speed;    this.width = width;    this.height = height; } public GameObject(Image img, double x, double y) {    super();    this.img = img;    this.x = x;     this.y = y; } public GameObject() { } /**  * 返回物体所在的矩形，便于后续的碰撞检测  * @return  */ public Rectangle getRect() {    return new Rectangle((int)x,(int)y,width,height);    }    }</code></pre><hr><h4 id="四、飞机类"><a href="#四、飞机类" class="headerlink" title="四、飞机类"></a>四、飞机类</h4><ul><li><p>在其中封装飞机的一些方法：画自己、飞机位置方法、键盘监听、游戏存活时间.</p><ol><li>重写一个drawself,画飞机的移动，飞机位置的方法，同时在planegame里调用<br>Plane plane= new Plane(planeImg,250,250);</li></ol></li></ul><p>代码如下：</p><pre><code> package game; import java.awt.Graphics; import java.awt.Image; public class Plane  extends GameObject { public  void  drawSelf(Graphics  g){    g.drawImage(img, (int)x,(int) y, null);    x++;  }    public  Plane(Image  img, double x, double y){    this.img = img;    this.x = x;    this.y = y; } }</code></pre><ol start="2"><li><p>在主窗口里写入键盘控制代码</p><ul><li><p>如下</p><p>  /<em>键盘控制</em>/</p><pre><code>class KeyMonitor extends KeyAdapter{@Overridepublic void keyPressed(KeyEvent e) {   plane.addDirection(e);}@Overridepublic void keyReleased(KeyEvent e) {   plane.minusDirection(e);}}</code></pre><ul><li><p>在初始化窗口增加监听</p><p>  addKeyListener(new KeyMonitor()); //给窗口增加键盘的监听</p></li><li><p>在飞机类封装方法，定义变量（上、下、左、右）、增加方向的方法、x++改为根据方向判断，注释掉的存活时间部分会用到。</p></li></ul></li></ul></li></ol><p>代码如下：</p><pre><code> import java.awt.Graphics; import java.awt.Image; import java.awt.event.KeyEvent; public class Plane extends   GameObject { int speed=3; boolean left,up,right,down; /*boolean live=true;*/ public void drawSelf(Graphics g){    /*if(live) { */        g.drawImage(img, (int)x, (int)y, null);     if(left) {        x-=speed;     }     if(right) {         x+=speed;     }     if(up) {         y-=speed;     }     if(down) {        y+=speed;     }    /*}else {    }*/ } public Plane(Image img,double x,double y) {    this.img=img;    this.x=x;    this.y=y;    this.speed=3;    this.width=40;    this.height=40; } //按下某个键增加相应的方向   public void addDirection(KeyEvent e) {        switch(e.getKeyCode()) {       case KeyEvent.VK_LEFT:           left=true;           break;       case KeyEvent.VK_UP:           up=true;           break;       case KeyEvent.VK_RIGHT:           right=true;           break;       case KeyEvent.VK_DOWN:           down=true;           break;       }   }    //抬起某个键释放相应的方向       public void minusDirection(KeyEvent e) {            switch(e.getKeyCode()) {           case KeyEvent.VK_LEFT:               left=false;               break;           case KeyEvent.VK_UP:               up=false;               break;           case KeyEvent.VK_RIGHT:               right=false;               break;           case KeyEvent.VK_DOWN:               down=false;               break;           } } }</code></pre><hr><h4 id="五、炮弹类"><a href="#五、炮弹类" class="headerlink" title="五、炮弹类"></a>五、炮弹类</h4><ol><li>构造炮弹的方法</li><li>画炮弹（包括碰撞反弹）</li><li>主窗口内操作</li></ol><ul><li>和plane类一样主窗口new对象直接50个（可改）Shell[] shells=new Shell[50];</li><li>初始化窗口初始化</li></ul><pre><code>    for(int i=0;i&lt;shells.length;i++) {    shells[i]= new Shell();     }</code></pre><ul><li>画方法里 画出所有的炮弹（位置画飞机的下面）</li></ul><pre><code>  for(int i=0;i&lt;shells.length;i++) {   shells[i].draw(g);  }</code></pre><ol start="4"><li><p>类代码：</p><pre><code>package game; import java.awt.Color; import java.awt.Graphics;  public class Shell extends GameObject {</code></pre></li></ol><pre><code>    double degree;     public Shell() {    x=200;    y=200;    width=10;    height=10;    speed=2;    degree=Math.random()*Math.PI*2;    }    public void draw(Graphics g) {    Color c =g.getColor();    g.setColor(Color.YELLOW);    g.fillOval((int)x, (int)y, width, height);//填充    //炮弹沿着任意角度去飞    x+=speed*Math.cos(degree);    y+=speed*Math.sin(degree);    if(x&lt;0||x&gt;Constant.GAME_WIDTH-width) {        degree =Math.PI-degree;    }    if(y&lt;30||y&gt;Constant.GAME_HEIGHT-height) {        degree =-degree;    }    g.setColor(c);   }     }</code></pre><ol start="5"><li><p>效果：</p><p><img src="https://s2.ax1x.com/2019/07/24/eEMP0O.gif" alt></p></li></ol><hr><h4 id="六、碰撞检测和爆炸类"><a href="#六、碰撞检测和爆炸类" class="headerlink" title="六、碰撞检测和爆炸类"></a>六、碰撞检测和爆炸类</h4><ul><li>碰撞检测</li></ul><ol><li>主窗口画炮弹的循环里加入</li></ol><pre><code>boolean touch=shells[i].getRect().intersects(plane.getRect());                   if(touch) {                    plane.live=false;}</code></pre><ol start="2"><li>将飞机类的注释去掉,如果发生碰撞飞机消失死掉</li></ol><ul><li>爆炸类</li></ul><ol><li>包含爆炸的位置和爆炸的图片加载</li></ol><p>代码如下：</p><pre><code>package game;import java.awt.Graphics;import java.awt.Image;public class Explode {double x, y;static Image[] imgs = new Image[16];static {    for (int i = 0; i &lt; 16; i++) {        imgs[i] = GameUtil.getImage(&quot;image/explode/e&quot; + (i + 1) + &quot;.gif&quot;);        imgs[i].getWidth(null);    }}int count;public void draw(Graphics g) {    if (count &lt;= 15) {        g.drawImage(imgs[count], (int) x, (int) y, null);        count++;    }}public Explode(double x, double y) {    this.x = x;    this.y = y;}  }</code></pre><ol start="2"><li><p>在主窗口声明 Explode bao;在画炮弹方法如果飞机死亡中加入</p><pre><code> if(bao==null) { bao= new Explode(plane.x,plane.y);      }</code></pre><ol start="3"><li>效果<br><img src="https://s2.ax1x.com/2019/07/24/eEfnxJ.gif" alt></li></ol></li></ol><hr><h4 id="七、增加游戏计时"><a href="#七、增加游戏计时" class="headerlink" title="七、增加游戏计时"></a>七、增加游戏计时</h4><ol><li><p>主窗口定义时间变量</p><pre><code>Date startTime=new Date();Date endTime;int period;//游戏持续的时间</code></pre><ol start="2"><li><p>在爆炸的if语句里加入</p><p> endTime=new Date();<br>period=(int)((endTime.getTime()-startTime.getTime())/1000);</p></li><li><p>在画炮弹里加入</p><p> //计时功能，给出提示</p><pre><code>if(!plane.live) { g.setColor(Color.red); Font f=new Font(&quot;宋体&quot;,Font.BOLD,50); g.setFont(f); g.drawString(&quot;时间：&quot;+period+&quot;秒&quot;,(int)plane.x, (int)plane.y);  }</code></pre></li><li>在主窗口画方法开始 加Color c=g.getColor();结束 加g.setColor(c);<br>变回原来的颜色</li></ol></li></ol><hr><ul><li><a href="https://pan.baidu.com/s/1C7Gnkx58yWqc6gyyGL0QuA" target="_blank" rel="noopener">源码素材</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yilia主题配置中遇到的一些问题 </title>
      <link href="/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、头像设置中的问题"><a href="#一、头像设置中的问题" class="headerlink" title="一、头像设置中的问题"></a>一、头像设置中的问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>  <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/1.PNG" alt="出错情况"></p><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h2 id><a href="#" class="headerlink" title="  "></a>  <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/1_1.PNG" alt></h2><h2 id="二、推送到远端时的问题"><a href="#二、推送到远端时的问题" class="headerlink" title="二、推送到远端时的问题"></a>二、推送到远端时的问题</h2><hr><h3 id="问题如下"><a href="#问题如下" class="headerlink" title="问题如下"></a>问题如下</h3><h2 id="-1"><a href="#-1" class="headerlink" title="   "></a>   <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/2.PNG" alt="打开方式和位置不对"></h2><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h4><p>   <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/2_2.jpg" alt="打开方式"></p><h4 id="打开位置"><a href="#打开位置" class="headerlink" title="打开位置"></a>打开位置</h4><h2 id="-2"><a href="#-2" class="headerlink" title="   "></a>   <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/2.3.png" alt></h2><h2 id="三、点击所有文章的缺失问题"><a href="#三、点击所有文章的缺失问题" class="headerlink" title="三、点击所有文章的缺失问题"></a>三、点击所有文章的缺失问题</h2><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>   1、node版本大于6.2</p><p>   2、博客根目录下（和上面打开位置相同）执行命令: cnpm install hexo-generator-json-content –save（或npm）</p><p>   3、在hexo的blog目录_config.yml添加配置如下，hexo g重新生成</p><pre><code> jsonContent:    meta: false    pages: false    posts:      title: true      date: true      path: true      text: false      raw: false      content: false      slug: false      updated: false      comments: false      link: false      permalink: false      excerpt: false      categories: false      tags: true</code></pre><hr><h2 id="四、插件安装问题"><a href="#四、插件安装问题" class="headerlink" title="四、插件安装问题"></a>四、插件安装问题</h2><h3 id="出错情况"><a href="#出错情况" class="headerlink" title="出错情况"></a>出错情况</h3><p>   <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/4.PNG" alt></p><h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><p>   <img src="//zfylearn.github.io/2019/07/08/yilia-zhu-ti-pei-zhi-zhong-yu-dao-de-yi-xie-wen-ti/4_4.PNG" alt></p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.cn" target="_blank" rel="noopener">www.codesheep.cn</a></p><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">https://blog.csdn.net/wsmrzx/article/details/81478945</a></p><p><a href="https://blog.csdn.net/Aoman_Hao/article/details/79292862" target="_blank" rel="noopener">https://blog.csdn.net/Aoman_Hao/article/details/79292862</a></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> yilia主题配置中遇到的一些问题  </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/14/hello-world/"/>
      <url>/2019/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
